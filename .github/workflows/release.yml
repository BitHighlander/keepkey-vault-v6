name: Release KeepKey Vault v6

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.id }}
      release_upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: KeepKey Vault ${{ github.ref_name }}
          draft: true
          prerelease: false

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'
            name: 'macOS-universal'
          - platform: 'ubuntu-22.04'
            args: ''
            name: 'linux-x64'
          - platform: 'windows-latest'
            args: ''
            name: 'windows-x64'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Check signing credentials
        id: check-signing
        run: |
          echo "üîç Checking for signing credentials..."
          
          if [ -n "${{ secrets.TAURI_PRIVATE_KEY }}" ]; then
            echo "‚úÖ TAURI_PRIVATE_KEY is set"
            echo "has_signing_key=true" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è  TAURI_PRIVATE_KEY is NOT set - will build without signing"
            echo "has_signing_key=false" >> $GITHUB_OUTPUT
          fi
          
          if [ -n "${{ secrets.TAURI_KEY_PASSWORD }}" ]; then
            echo "‚úÖ TAURI_KEY_PASSWORD is set"
          else
            echo "‚ö†Ô∏è  TAURI_KEY_PASSWORD is NOT set"
          fi
          
          echo "üìù To enable signing, add these secrets to your repository:"
          echo "   - TAURI_PRIVATE_KEY: base64-encoded signing key"
          echo "   - TAURI_KEY_PASSWORD: password for the signing key"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install dependencies (Ubuntu)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev librsvg2-dev patchelf

      - name: Install Bun
        uses: oven-sh/setup-bun@v2

      - name: Install app dependencies
        run: bun install

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ steps.check-signing.outputs.has_signing_key == 'true' && secrets.TAURI_PRIVATE_KEY || '' }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ steps.check-signing.outputs.has_signing_key == 'true' && secrets.TAURI_KEY_PASSWORD || '' }}
          # Apple notarization credentials
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          # Apple code signing
          CODESIGN_IDENTITY: ${{ secrets.CODESIGN_IDENTITY }}
          KEYCHAIN_NAME: ${{ secrets.KEYCHAIN_NAME }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          MACOS_CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE_BASE64 }}
          MACOS_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
        with:
          projectPath: .
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [create-release, build-tauri]
    
    steps:
      - name: Publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            }) 